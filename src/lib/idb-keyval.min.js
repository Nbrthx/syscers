function promisifyRequest(r){return new Promise((e,t)=>{r.oncomplete=r.onsuccess=()=>e(r.result),r.onabort=r.onerror=()=>t(r.error)})}function createStore(e,n){const t=indexedDB.open(e),u=(t.onupgradeneeded=()=>t.result.createObjectStore(n),promisifyRequest(t));return(t,r)=>u.then(e=>r(e.transaction(n,t).objectStore(n)))}let defaultGetStoreFunc;function defaultGetStore(){return defaultGetStoreFunc=defaultGetStoreFunc||createStore("syscers","base")}function get(t,e=defaultGetStore()){return e("readonly",e=>promisifyRequest(e.get(t)))}function set(t,r,e=defaultGetStore()){return e("readwrite",e=>(e.put(r,t),promisifyRequest(e.transaction)))}function setMany(e,t=defaultGetStore()){return t("readwrite",t=>(e.forEach(e=>t.put(e[1],e[0])),promisifyRequest(t.transaction)))}function getMany(e,t=defaultGetStore()){return t("readonly",t=>Promise.all(e.map(e=>promisifyRequest(t.get(e)))))}function update(n,u,e=defaultGetStore()){return e("readwrite",r=>new Promise((e,t)=>{r.get(n).onsuccess=function(){try{r.put(u(this.result),n),e(promisifyRequest(r.transaction))}catch(e){t(e)}}}))}function del(t,e=defaultGetStore()){return e("readwrite",e=>(e.delete(t),promisifyRequest(e.transaction)))}function delMany(e,t=defaultGetStore()){return t("readwrite",t=>(e.forEach(e=>t.delete(e)),promisifyRequest(t.transaction)))}function clear(e=defaultGetStore()){return e("readwrite",e=>(e.clear(),promisifyRequest(e.transaction)))}function eachCursor(e,t){return e.openCursor().onsuccess=function(){this.result&&(t(this.result),this.result.continue())},promisifyRequest(e.transaction)}function keys(e=defaultGetStore()){return e("readonly",e=>{if(e.getAllKeys)return promisifyRequest(e.getAllKeys());const t=[];return eachCursor(e,e=>t.push(e.key)).then(()=>t)})}function values(e=defaultGetStore()){return e("readonly",e=>{if(e.getAll)return promisifyRequest(e.getAll());const t=[];return eachCursor(e,e=>t.push(e.value)).then(()=>t)})}function entries(r=defaultGetStore()){return r("readonly",e=>{if(e.getAll&&e.getAllKeys)return Promise.all([promisifyRequest(e.getAllKeys()),promisifyRequest(e.getAll())]).then(([e,r])=>e.map((e,t)=>[e,r[t]]));const t=[];return r("readonly",e=>eachCursor(e,e=>t.push([e.key,e.value])).then(()=>t))})}export{clear,createStore,del,delMany,entries,get as dbget,getMany,keys,promisifyRequest,set as dbset,setMany,update,values};